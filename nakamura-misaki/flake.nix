{
  description = "Nakamura-Misaki - Multi-User Claude Code Agent Service";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
  };

  outputs = { self, nixpkgs }:
  let
    system = "x86_64-linux";
    pkgs = import nixpkgs { inherit system; };
  in {
    # ÈñãÁô∫Áí∞Â¢ÉÔºàdirenvÁî®Ôºâ
    devShells.${system}.default = pkgs.mkShell {
      name = "nakamura-misaki-dev";

      buildInputs = with pkgs; [
        python312
        python312Packages.pip
        python312Packages.virtualenv
        python312Packages.requests
        python312Packages.redis
        git
        jq
      ];

      shellHook = ''
        echo "ü§ñ Nakamura-Misaki ÈñãÁô∫Áí∞Â¢É"
        echo "üêç Python: $(python --version)"
        echo ""

        # ‰ªÆÊÉ≥Áí∞Â¢É„ÅÆ„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
        if [ ! -d ".venv" ]; then
          echo "üì¶ ‰ªÆÊÉ≥Áí∞Â¢É„Çí‰ΩúÊàê‰∏≠..."
          python -m venv .venv
        fi

        # ‰ªÆÊÉ≥Áí∞Â¢É„Çí„Ç¢„ÇØ„ÉÜ„Ç£„Éô„Éº„Éà
        source .venv/bin/activate

        # Claude Agent SDK„Çí„Ç§„É≥„Çπ„Éà„Éº„É´Ôºà„Åæ„Å†„ÅÆÂ†¥ÂêàÔºâ
        if ! python -c "import claude_agent_sdk" 2>/dev/null; then
          echo "üîß Claude Agent SDK „Çí„Ç§„É≥„Çπ„Éà„Éº„É´‰∏≠..."
          pip install claude-agent-sdk
        fi

        # Redis & RQ „Çí„Ç§„É≥„Çπ„Éà„Éº„É´Ôºà„Åæ„Å†„ÅÆÂ†¥ÂêàÔºâ
        if ! python -c "import redis" 2>/dev/null; then
          echo "üîß Redis & RQ „Çí„Ç§„É≥„Çπ„Éà„Éº„É´‰∏≠..."
          pip install redis rq
        fi

        echo "‚úÖ ÈñãÁô∫Áí∞Â¢ÉÊ∫ñÂÇôÂÆå‰∫Ü"
        echo "üéØ Python: $(which python)"
        echo "üìÅ ‰ΩúÊ•≠„Éá„Ç£„É¨„ÇØ„Éà„É™: $PWD"
        echo ""
        echo "üí° „Ç≥„Éû„É≥„Éâ:"
        echo "  python -m src.main  - „Çµ„Éº„Éì„ÇπËµ∑Âãï"
      '';
    };

    # NixOS„É¢„Ç∏„É•„Éº„É´ÔºàÊú¨Áï™„Éá„Éó„É≠„Ç§Áî®Ôºâ
    nixosModules.default = { config, lib, pkgs, ... }:
    let
      cfg = config.services.nakamura-misaki;
      projectDir = "/home/noguchilin/projects/nakamura-misaki";

      pythonEnv = pkgs.python312.withPackages (ps: with ps; [
        requests
      ]);
    in {
      options.services.nakamura-misaki = {
        enable = lib.mkEnableOption "Nakamura-Misaki Claude Agent Service";

        port = lib.mkOption {
          type = lib.types.port;
          default = 10000;
          description = "Port for the web service";
        };

        enableFunnel = lib.mkOption {
          type = lib.types.bool;
          default = true;
          description = "Enable Tailscale Funnel for external access";
        };

        slackToken = lib.mkOption {
          type = lib.types.str;
          default = "";
          description = "Slack bot token (use sops for secrets)";
        };

        anthropicApiKey = lib.mkOption {
          type = lib.types.str;
          default = "";
          description = "Anthropic API key (use sops for secrets)";
        };

        nakamuraUserId = lib.mkOption {
          type = lib.types.str;
          default = "U09AHTB4X4H";
          description = "Slack user ID for Nakamura";
        };
      };

      config = lib.mkIf cfg.enable {
        # Main service
        systemd.services.nakamura-misaki = {
          description = "Nakamura-Misaki Multi-User Claude Code Agent";
          wantedBy = [ "multi-user.target" ];
          after = [ "network.target" ];

          environment = {
            PYTHONPATH = "${projectDir}/src:${projectDir}";
            HOME = "/home/noguchilin";
          };

          path = [ pythonEnv pkgs.nodejs_22 ];

          serviceConfig = {
            Type = "simple";
            User = "noguchilin";
            Group = "users";
            WorkingDirectory = projectDir;

            ExecStart = pkgs.writeShellScript "nakamura-start" ''
              ${lib.optionalString (cfg.slackToken != "") ''
                export SLACK_BOT_TOKEN="${cfg.slackToken}"
              ''}
              ${lib.optionalString (cfg.anthropicApiKey != "") ''
                export ANTHROPIC_API_KEY="${cfg.anthropicApiKey}"
              ''}
              export NAKAMURA_USER_ID=${cfg.nakamuraUserId}
              export PORT=${toString cfg.port}
              export PYTHONUNBUFFERED=1

              # venvÂ≠òÂú®Á¢∫Ë™ç
              if [ ! -f ${projectDir}/.venv/bin/python ]; then
                echo "‚ùå venv not found at ${projectDir}/.venv"
                exit 1
              fi

              # claude-agent-sdkÁ¢∫Ë™ç
              if ! ${projectDir}/.venv/bin/python -c "import claude_agent_sdk" 2>/dev/null; then
                echo "‚ö†Ô∏è claude-agent-sdk not found, installing..."
                ${projectDir}/.venv/bin/pip install --quiet claude-agent-sdk
              fi

              cd ${projectDir}
              exec ${projectDir}/.venv/bin/python -m src.main
            '';

            Restart = "always";
            RestartSec = 10;
            KillMode = "mixed";
            KillSignal = "SIGTERM";
            TimeoutStopSec = 10;

            # „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®≠ÂÆö
            PrivateTmp = true;
            ProtectSystem = "strict";
            ProtectHome = false;  # Claude CLI„Ç¢„ÇØ„Çª„ÇπË®±ÂèØ
          };
        };

        # Tailscale FunnelË®≠ÂÆö
        systemd.services.nakamura-misaki-funnel = lib.mkIf cfg.enableFunnel {
          description = "Setup Tailscale Funnel for Nakamura-Misaki";
          wantedBy = [ "multi-user.target" ];
          after = [ "tailscaled.service" "nakamura-misaki.service" "tailscale-serve-setup.service" ];

          serviceConfig = {
            Type = "oneshot";
            RemainAfterExit = true;
            User = "noguchilin";

            ExecStart = pkgs.writeShellScript "setup-funnel" ''
              # Wait for Tailscale and Serve to be ready
              sleep 5

              # Enable Funnel for external access
              ${pkgs.tailscale}/bin/tailscale funnel --bg --https=${toString cfg.port} ${toString cfg.port}

              # Display webhook URL
              echo "Nakamura-Misaki webhook URL (external):"
              echo "https://$(${pkgs.tailscale}/bin/tailscale status --json | ${pkgs.jq}/bin/jq -r '.Self.DNSName' | sed 's/\.$//')/:${toString cfg.port}/webhook/slack"
            '';

            ExecStop = pkgs.writeShellScript "stop-funnel" ''
              ${pkgs.tailscale}/bin/tailscale funnel --https=${toString cfg.port} off
            '';
          };
        };
      };
    };
  };
}
