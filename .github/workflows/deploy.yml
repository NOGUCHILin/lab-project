name: Deploy to NixOS

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout lab-project repository
        uses: actions/checkout@v4

      # Nixをインストール
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      # Tailscaleに接続
      - name: Connect to Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci

      # SSH秘密鍵をセットアップ
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "$NIXOS_ROOT_SSH_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          # StrictHostKeyChecking=accept-newを使用するため、ssh-keyscanは不要
        env:
          NIXOS_ROOT_SSH_KEY: ${{ secrets.NIXOS_ROOT_SSH_KEY }}

      # nakamura-misaki User Tokenを更新
      - name: Update nakamura-misaki User Token in sops
        run: |
          ssh -o StrictHostKeyChecking=accept-new root@home-lab-01.tail4ed625.ts.net "
            cd /etc/nixos
            # sops-nixで暗号化ファイルを更新
            export SOPS_AGE_KEY_FILE=/etc/nixos/age-key.txt
            echo 'slack_bot_token: ${{ secrets.NAKAMURA_MISAKI_USER_TOKEN }}' | \
              sops --input-type yaml --output-type yaml \
              --set '.[\"slack_bot_token\"]' \
              secrets/nakamura-misaki.yaml

            echo '✅ nakamura-misaki User Token updated in sops'
          "

      # deploy-rsをインストール (バイナリキャッシュから取得)
      - name: Install deploy-rs
        run: |
          nix profile install nixpkgs#deploy-rs

      # deploy-rsでNixOS設定をデプロイ (Dashboard & nakamura-misaki両方ともNixパッケージ化済み)
      # --remote-build必須: NixOSシステム全体のビルドはリモートで実行が必要
      - name: Deploy NixOS configuration with deploy-rs
        run: |
          cd nixos-config
          deploy \
            --skip-checks \
            --remote-build \
            --ssh-user root \
            --ssh-opts "-o StrictHostKeyChecking=accept-new" \
            .#home-lab-01

      # データベースマイグレーション実行
      - name: Run database migrations
        run: |
          echo "🔄 Running database migrations for nakamura-misaki..."
          ssh -o StrictHostKeyChecking=accept-new root@home-lab-01.tail4ed625.ts.net '
            cd /home/noguchilin/projects/lab-project/nakamura-misaki

            # uvを使ってalembicマイグレーションを実行
            uv run alembic upgrade head

            # マイグレーション結果を確認
            echo "✅ Migration completed. Current version:"
            psql -U nakamura_misaki -d nakamura_misaki -c "SELECT version_num FROM alembic_version;"
          '

      # サービス状態確認
      - name: Verify deployment
        run: |
          ssh -o StrictHostKeyChecking=accept-new root@home-lab-01.tail4ed625.ts.net '
            echo "📊 Service status:"
            systemctl status dashboard.service --no-pager || true
            systemctl status nakamura-misaki.service --no-pager || true

            echo ""
            echo "🔍 Recent logs (last 20 lines):"
            journalctl -u nakamura-misaki.service -n 20 --no-pager || true
          '

      # サービス起動待機
      - name: Wait for service startup
        run: |
          echo "⏳ Waiting 30 seconds for services to start..."
          sleep 30

      # ヘルスチェック（nakamura-misaki API）
      - name: Health Check (nakamura-misaki API)
        id: health_check
        continue-on-error: true
        run: |
          echo "🏥 Performing health check on nakamura-misaki API..."

          # TailscaleドメインをSSH経由で取得（jqを使わずにテキスト出力から抽出）
          TAILSCALE_DOMAIN=$(ssh -o StrictHostKeyChecking=accept-new root@home-lab-01.tail4ed625.ts.net "tailscale status | grep -E '^\s*\S+\s+\S+.*this machine' | awk '{print \$2}'" | head -1)

          # ドメインが取得できなかった場合はhostnameを使用
          if [ -z "$TAILSCALE_DOMAIN" ]; then
            TAILSCALE_DOMAIN=$(ssh -o StrictHostKeyChecking=accept-new root@home-lab-01.tail4ed625.ts.net "hostname -f")
          fi

          echo "Tailscale domain: $TAILSCALE_DOMAIN"

          # ヘルスチェック（最大5回リトライ、各5秒間隔）
          for i in {1..5}; do
            echo "Attempt $i/5..."
            if curl -f --max-time 10 "https://${TAILSCALE_DOMAIN}:10000/health"; then
              echo "✅ Health check passed!"
              echo "status=success" >> $GITHUB_OUTPUT
              exit 0
            fi

            if [ $i -lt 5 ]; then
              echo "⏳ Retrying in 5 seconds..."
              sleep 5
            fi
          done

          echo "❌ Health check failed after 5 attempts"
          echo "status=failed" >> $GITHUB_OUTPUT
          exit 1

      # 失敗時の自動ロールバック
      - name: Auto Rollback on Health Check Failure
        if: failure() && steps.health_check.outputs.status == 'failed'
        run: |
          echo "⚠️ Health check failed. Rolling back to previous NixOS generation..."

          ssh -o StrictHostKeyChecking=accept-new root@home-lab-01.tail4ed625.ts.net "
            echo '🔄 Rolling back to previous generation...'
            nixos-rebuild switch --rollback

            echo '⏳ Waiting for services to restart...'
            sleep 15

            echo '📊 Post-rollback service status:'
            systemctl status nakamura-misaki.service --no-pager || true
          "

          # ロールバック後のヘルスチェック
          echo "🏥 Verifying rollback succeeded..."
          sleep 10

          # Tailscaleドメイン取得（jq不要の方法）
          TAILSCALE_DOMAIN=$(ssh -o StrictHostKeyChecking=accept-new root@home-lab-01.tail4ed625.ts.net "tailscale status | grep -E '^\s*\S+\s+\S+.*this machine' | awk '{print \$2}'" | head -1)
          if [ -z "$TAILSCALE_DOMAIN" ]; then
            TAILSCALE_DOMAIN=$(ssh -o StrictHostKeyChecking=accept-new root@home-lab-01.tail4ed625.ts.net "hostname -f")
          fi

          if curl -f --max-time 10 "https://${TAILSCALE_DOMAIN}:10000/health"; then
            echo "✅ Rollback successful! Service is healthy."
          else
            echo "❌ WARNING: Rollback completed but health check still failing!"
            echo "Manual intervention may be required."
          fi

          # ワークフロー全体を失敗扱いにする
          exit 1
