name: Test Dashboard

on:
  push:
    branches: [main]
    paths:
      - 'projects/dashboard/**'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [main]
    paths:
      - 'projects/dashboard/**'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: projects/dashboard

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: projects/dashboard/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

  nix-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: projects/dashboard

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v14

      - name: Test Nix build
        run: |
          set +e
          nix build .#dashboard --no-link --print-build-logs
          BUILD_RESULT=$?
          if [ $BUILD_RESULT -ne 0 ]; then
            echo "::error::Nix build failed. Checking for derivation logs..."
            # Find the most recent failed derivation
            DRV=$(find /nix/store -name "*.drv" -type f 2>/dev/null | grep unified-dashboard | tail -1)
            if [ -n "$DRV" ]; then
              echo "::group::Detailed build logs"
              nix log "$DRV" 2>&1 || echo "Could not retrieve nix log"
              echo "::endgroup::"
            fi
            exit $BUILD_RESULT
          fi

  e2e:
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        working-directory: projects/dashboard

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: projects/dashboard/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Start server
        run: npm start &
        env:
          PORT: 3000

      - name: Wait for server
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 1; done'

      - name: Run E2E tests
        run: npm run test
        env:
          CI: true

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: projects/dashboard/playwright-report/
          retention-days: 7

      - name: Upload test screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: projects/dashboard/test-results/
          retention-days: 7
