'use client';

import { useEffect, useState, useMemo } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { promptApi, Prompt } from '@/lib/api';
import {
  analyzePrompt,
  getCachingRecommendations,
  getTokenBgColor,
  getTokenColor,
  countTokens,
} from '@/lib/prompt-utils';

interface ContextSettings {
  contextWindow: number;
  compressionThreshold: number;
  recentMessagesToKeep: number;
  conversationTtlHours: number;
  model: string;
  maxTokens: number;
}

const CURRENT_SETTINGS: ContextSettings = {
  contextWindow: 200000,
  compressionThreshold: 0.8,
  recentMessagesToKeep: 10,
  conversationTtlHours: 24,
  model: 'claude-3-5-sonnet-20241022',
  maxTokens: 4096,
};

type TabType = 'prompts' | 'settings';

export default function ContextManagementPage() {
  const [activeTab, setActiveTab] = useState<TabType>('prompts');
  const [prompts, setPrompts] = useState<Prompt[]>([]);
  const [selectedPrompt, setSelectedPrompt] = useState<Prompt | null>(null);
  const [editing, setEditing] = useState(false);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [settings] = useState<ContextSettings>(CURRENT_SETTINGS);

  const ACTIVE_PROMPT_NAME = 'default';

  useEffect(() => {
    fetchPrompts();
  }, []);

  const fetchPrompts = async () => {
    try {
      const data = await promptApi.list();
      setPrompts(data);
      if (data.length > 0 && !selectedPrompt) {
        setSelectedPrompt(data[0]);
      }
    } catch (error) {
      console.error('Failed to fetch prompts:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async () => {
    if (!selectedPrompt) return;

    setSaving(true);
    try {
      await promptApi.update(selectedPrompt);
      await fetchPrompts();
      setEditing(false);
      alert('„Éó„É≠„É≥„Éó„Éà„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü');
    } catch (error) {
      console.error('Failed to save prompt:', error);
      alert('‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    } finally {
      setSaving(false);
    }
  };

  const analysis = useMemo(
    () => (selectedPrompt ? analyzePrompt(selectedPrompt.system_prompt) : null),
    [selectedPrompt?.system_prompt]
  );

  const cachingInfo = useMemo(
    () => (analysis ? getCachingRecommendations(analysis.tokenCount) : null),
    [analysis?.tokenCount]
  );

  const compressionThresholdTokens = Math.floor(
    settings.contextWindow * settings.compressionThreshold
  );

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-lg">Ë™≠„ÅøËæº„Åø‰∏≠...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4 sm:p-6 lg:p-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-6 sm:mb-8">
          <h1 className="text-2xl sm:text-3xl lg:text-4xl font-bold flex items-center gap-2">
            üß† „Ç≥„É≥„ÉÜ„Ç≠„Çπ„ÉàÁÆ°ÁêÜ
          </h1>
          <p className="text-sm text-gray-600 mt-2">
            Anthropic Context Engineering Principles Ê∫ñÊã†
          </p>
        </div>

        {/* Tab Navigation */}
        <div className="mb-6">
          <div className="border-b border-gray-200">
            <nav className="-mb-px flex space-x-8">
              <button
                onClick={() => setActiveTab('prompts')}
                className={`${
                  activeTab === 'prompts'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm transition-colors`}
              >
                ‚úèÔ∏è „Éó„É≠„É≥„Éó„ÉàÁ∑®ÈõÜ
              </button>
              <button
                onClick={() => setActiveTab('settings')}
                className={`${
                  activeTab === 'settings'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm transition-colors`}
              >
                ‚öôÔ∏è „Ç≥„É≥„ÉÜ„Ç≠„Çπ„ÉàË®≠ÂÆö
              </button>
            </nav>
          </div>
        </div>

        {/* Prompts Tab */}
        {activeTab === 'prompts' && (
          <div className="grid grid-cols-1 lg:grid-cols-12 gap-4 sm:gap-6">
            {/* „Éó„É≠„É≥„Éó„Éà‰∏ÄË¶ß */}
            <Card className="lg:col-span-3">
              <CardHeader>
                <CardTitle>„Éó„É≠„É≥„Éó„Éà‰∏ÄË¶ß</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  {prompts.map((prompt) => {
                    const tokenCount = countTokens(prompt.system_prompt);
                    const isActive = prompt.name === ACTIVE_PROMPT_NAME;

                    return (
                      <button
                        key={prompt.name}
                        onClick={() => {
                          setSelectedPrompt(prompt);
                          setEditing(false);
                        }}
                        className={`w-full text-left px-4 py-3 rounded-lg transition-colors border ${
                          selectedPrompt?.name === prompt.name
                            ? 'bg-blue-100 text-blue-900 border-blue-300'
                            : 'hover:bg-gray-100 border-transparent'
                        }`}
                      >
                        <div className="flex items-center justify-between mb-1">
                          <div className="font-medium">{prompt.name}</div>
                          {isActive && (
                            <span className="text-xs bg-green-500 text-white px-2 py-1 rounded">
                              ‚úì ÈÅ©Áî®‰∏≠
                            </span>
                          )}
                        </div>
                        <div className="text-xs text-gray-500 mb-2">
                          {prompt.version}
                        </div>
                        <div
                          className={`text-xs px-2 py-1 rounded inline-block ${getTokenBgColor(
                            tokenCount
                          )}`}
                        >
                          {tokenCount.toLocaleString()} tokens
                        </div>
                      </button>
                    );
                  })}
                </div>
              </CardContent>
            </Card>

            {/* „Éó„É≠„É≥„Éó„ÉàÁ∑®ÈõÜ„Ç®„É™„Ç¢ */}
            <Card className="lg:col-span-6">
              <CardHeader>
                <div className="flex justify-between items-center flex-wrap gap-2">
                  <div>
                    <CardTitle className="mb-1">
                      {selectedPrompt?.name || '„Éó„É≠„É≥„Éó„ÉàÊú™ÈÅ∏Êäû'}
                    </CardTitle>
                    {analysis && (
                      <div className="flex items-center gap-2 flex-wrap">
                        <span
                          className={`text-sm font-semibold ${getTokenColor(
                            analysis.tokenCount
                          )}`}
                        >
                          {analysis.tokenCount.toLocaleString()} tokens
                        </span>
                        <span className="text-xs text-gray-500">
                          ÊßãÈÄ†„Çπ„Ç≥„Ç¢: {analysis.structureScore}/100
                        </span>
                      </div>
                    )}
                  </div>
                  <div className="space-x-2">
                    {editing ? (
                      <>
                        <Button
                          variant="outline"
                          onClick={() => {
                            setEditing(false);
                            fetchPrompts();
                          }}
                        >
                          „Ç≠„É£„É≥„Çª„É´
                        </Button>
                        <Button onClick={handleSave} disabled={saving}>
                          {saving ? '‰øùÂ≠ò‰∏≠...' : '‰øùÂ≠ò'}
                        </Button>
                      </>
                    ) : (
                      <Button onClick={() => setEditing(true)}>Á∑®ÈõÜ</Button>
                    )}
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                {selectedPrompt ? (
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="description">Ë™¨Êòé</Label>
                      <Input
                        id="description"
                        value={selectedPrompt.description}
                        onChange={(e) =>
                          setSelectedPrompt({
                            ...selectedPrompt,
                            description: e.target.value,
                          })
                        }
                        disabled={!editing}
                        className="mt-1"
                      />
                    </div>

                    <div>
                      <Label htmlFor="version">„Éê„Éº„Ç∏„Éß„É≥</Label>
                      <Input
                        id="version"
                        value={selectedPrompt.version}
                        onChange={(e) =>
                          setSelectedPrompt({
                            ...selectedPrompt,
                            version: e.target.value,
                          })
                        }
                        disabled={!editing}
                        className="mt-1"
                      />
                    </div>

                    <div>
                      <Label htmlFor="system_prompt">„Ç∑„Çπ„ÉÜ„É†„Éó„É≠„É≥„Éó„Éà</Label>
                      <Textarea
                        id="system_prompt"
                        value={selectedPrompt.system_prompt}
                        onChange={(e) =>
                          setSelectedPrompt({
                            ...selectedPrompt,
                            system_prompt: e.target.value,
                          })
                        }
                        disabled={!editing}
                        className="mt-1 font-mono text-sm"
                        rows={25}
                      />
                    </div>

                    {/* ÊßãÈÄ†ÂàÜÊûê„Éë„Éç„É´ */}
                    {analysis && (
                      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <h3 className="font-semibold text-blue-900 mb-3">
                          ÊßãÈÄ†ÂàÜÊûê
                        </h3>
                        <div className="grid grid-cols-2 gap-2 text-sm">
                          <div className="flex items-center">
                            {analysis.hasXmlStructure ? '‚úÖ' : '‚ùå'} XMLÊßãÈÄ†
                          </div>
                          <div className="flex items-center">
                            {analysis.hasExamples ? '‚úÖ' : '‚ùå'} ÂÖ∑‰Ωì‰æã
                          </div>
                          <div className="flex items-center">
                            {analysis.hasInstructions ? '‚úÖ' : '‚ùå'} ÊòéÁ¢∫„Å™„É´„Éº„É´
                          </div>
                          <div className="flex items-center">
                            {analysis.isConcise ? '‚úÖ' : '‚ùå'} Á∞°ÊΩîÊÄß (&lt;5K)
                          </div>
                        </div>

                        {analysis.xmlTags.length > 0 && (
                          <div className="mt-3">
                            <div className="text-xs text-gray-700 mb-1">
                              Ê§úÂá∫„Åï„Çå„ÅüXML„Çø„Ç∞:
                            </div>
                            <div className="flex flex-wrap gap-1">
                              {analysis.xmlTags.map((tag) => (
                                <span
                                  key={tag}
                                  className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded"
                                >
                                  &lt;{tag}&gt;
                                </span>
                              ))}
                            </div>
                          </div>
                        )}

                        {cachingInfo && cachingInfo.shouldCache && (
                          <div className="mt-3 bg-green-100 text-green-900 p-2 rounded text-sm">
                            üí∞ „Ç≠„É£„ÉÉ„Ç∑„É≥„Ç∞Êé®Â•®: {cachingInfo.estimatedSavings}
                          </div>
                        )}

                        {analysis.recommendations.length > 0 && (
                          <div className="mt-3">
                            <div className="text-xs font-semibold text-gray-700 mb-1">
                              ÊîπÂñÑÊé®Â•®‰∫ãÈ†Ö:
                            </div>
                            <ul className="text-xs text-gray-700 space-y-1 list-disc list-inside">
                              {analysis.recommendations.map((rec, idx) => (
                                <li key={idx}>{rec}</li>
                              ))}
                            </ul>
                          </div>
                        )}
                      </div>
                    )}

                    <div className="text-sm text-gray-500">
                      <div>
                        ‰ΩúÊàêÊó•ÊôÇ:{' '}
                        {new Date(selectedPrompt.created_at).toLocaleString(
                          'ja-JP'
                        )}
                      </div>
                      <div>
                        Êõ¥Êñ∞Êó•ÊôÇ:{' '}
                        {new Date(selectedPrompt.updated_at).toLocaleString(
                          'ja-JP'
                        )}
                      </div>
                    </div>
                  </div>
                ) : (
                  <p className="text-gray-500">Â∑¶„Åã„Çâ„Éó„É≠„É≥„Éó„Éà„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>
                )}
              </CardContent>
            </Card>

            {/* Anthropic Best Practices „Éë„Éç„É´ */}
            <Card className="lg:col-span-3">
              <CardHeader>
                <CardTitle className="text-base">
                  Anthropic Best Practices
                </CardTitle>
              </CardHeader>
              <CardContent className="text-sm space-y-4">
                <div>
                  <h4 className="font-semibold mb-2">Context Engineering</h4>
                  <ul className="space-y-1 text-xs text-gray-700">
                    <li className="flex items-start">
                      <span className="mr-2">üìê</span>
                      <span>
                        <strong>ÊßãÈÄ†Âåñ:</strong> XML„Çø„Ç∞„ÅßÊòéÁ¢∫„Å´Âå∫ÂàÜ
                      </span>
                    </li>
                    <li className="flex items-start">
                      <span className="mr-2">üìö</span>
                      <span>
                        <strong>ÂÖ∑‰Ωì‰æã:</strong> &lt;example&gt;„ÅßÊèêÁ§∫
                      </span>
                    </li>
                    <li className="flex items-start">
                      <span className="mr-2">‚úÇÔ∏è</span>
                      <span>
                        <strong>Á∞°ÊΩîÊÄß:</strong> 5000„Éà„Éº„ÇØ„É≥‰ª•‰∏ãÊé®Â•®
                      </span>
                    </li>
                    <li className="flex items-start">
                      <span className="mr-2">üíæ</span>
                      <span>
                        <strong>„Ç≠„É£„ÉÉ„Ç∑„É≥„Ç∞:</strong> 1024+„Éà„Éº„ÇØ„É≥„ÅßÊúâÂäπ
                      </span>
                    </li>
                  </ul>
                </div>

                <div>
                  <h4 className="font-semibold mb-2">Êé®Â•®XML„Çø„Ç∞</h4>
                  <div className="flex flex-wrap gap-1">
                    {[
                      'instructions',
                      'example',
                      'context',
                      'thinking',
                      'document',
                    ].map((tag) => (
                      <code
                        key={tag}
                        className="text-xs bg-gray-100 px-2 py-1 rounded"
                      >
                        &lt;{tag}&gt;
                      </code>
                    ))}
                  </div>
                </div>

                <div>
                  <h4 className="font-semibold mb-2">„Éà„Éº„ÇØ„É≥ÈñæÂÄ§</h4>
                  <div className="space-y-1 text-xs">
                    <div className="flex items-center">
                      <span className="w-3 h-3 bg-green-500 rounded-full mr-2"></span>
                      <span>&lt;2K: ÊúÄÈÅ©</span>
                    </div>
                    <div className="flex items-center">
                      <span className="w-3 h-3 bg-yellow-500 rounded-full mr-2"></span>
                      <span>2-5K: ËâØÂ•Ω</span>
                    </div>
                    <div className="flex items-center">
                      <span className="w-3 h-3 bg-orange-500 rounded-full mr-2"></span>
                      <span>5-10K: Ë¶ÅÊîπÂñÑ</span>
                    </div>
                    <div className="flex items-center">
                      <span className="w-3 h-3 bg-red-500 rounded-full mr-2"></span>
                      <span>&gt;10K: ÂúßÁ∏ÆÊé®Â•®</span>
                    </div>
                  </div>
                </div>

                <a
                  href="https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/overview"
                  target="_blank"
                  rel="noopener noreferrer"
                  className="block text-xs text-blue-600 hover:underline"
                >
                  üìñ Prompt Engineering Guide ‚Üí
                </a>
              </CardContent>
            </Card>
          </div>
        )}

        {/* Settings Tab */}
        {activeTab === 'settings' && (
          <div className="space-y-6">
            {/* Alert: Future Enhancement Notice */}
            <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <div className="flex items-start">
                <div className="flex-shrink-0">
                  <svg
                    className="h-5 w-5 text-blue-400"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fillRule="evenodd"
                      d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z"
                      clipRule="evenodd"
                    />
                  </svg>
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-blue-800">
                    ÁèæÂú®„ÅØË™≠„ÅøÂèñ„ÇäÂ∞ÇÁî®
                  </h3>
                  <p className="mt-1 text-sm text-blue-700">
                    Ë®≠ÂÆö„ÅÆÁ∑®ÈõÜÊ©üËÉΩ„ÅØ‰ªäÂæåÂÆüË£Ö‰∫àÂÆö„Åß„Åô„ÄÇÁèæÂú®„ÅØ„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÅÆPython„Ç≥„Éº„Éâ„ÅßÂÆöÁæ©„Åï„Çå„ÅüÂÄ§„ÇíË°®Á§∫„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ
                  </p>
                </div>
              </div>
            </div>

            {/* Context Compression Settings */}
            <Card>
              <CardHeader>
                <CardTitle>‚úÇÔ∏è „Ç≥„É≥„ÉÜ„Ç≠„Çπ„ÉàÂúßÁ∏ÆË®≠ÂÆö</CardTitle>
                <p className="text-sm text-gray-600 mt-1">
                  AnthropicÊé®Â•®„ÅÆ„ÄåCompaction„ÄçÊà¶Áï• - „Éà„Éº„ÇØ„É≥‰ΩøÁî®Èáè„ÇíÊúÄÂ§ß84%ÂâäÊ∏õ
                </p>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <label className="block text-sm font-medium text-gray-700">
                      „Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Ç¶„Ç£„É≥„Éâ„Ç¶
                    </label>
                    <p className="mt-1 text-sm text-gray-500">
                      Claude 3.5 Sonnet„ÅÆÊúÄÂ§ß„Ç≥„É≥„ÉÜ„Ç≠„Çπ„ÉàÈï∑
                    </p>
                  </div>
                  <div className="ml-4 flex-shrink-0">
                    <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-purple-100 text-purple-800">
                      {settings.contextWindow.toLocaleString()} „Éà„Éº„ÇØ„É≥
                    </span>
                  </div>
                </div>

                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <label className="block text-sm font-medium text-gray-700">
                      ÂúßÁ∏ÆÈñæÂÄ§
                    </label>
                    <p className="mt-1 text-sm text-gray-500">
                      „Åì„ÅÆÂâ≤Âêà„Å´ÈÅî„Åô„Çã„Å®Ëá™ÂãïÂúßÁ∏Æ„ÇíÂÆüË°å (
                      {compressionThresholdTokens.toLocaleString()}{' '}
                      „Éà„Éº„ÇØ„É≥Âà∞ÈÅîÊôÇ)
                    </p>
                  </div>
                  <div className="ml-4 flex-shrink-0">
                    <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-yellow-100 text-yellow-800">
                      {(settings.compressionThreshold * 100).toFixed(0)}%
                    </span>
                  </div>
                </div>

                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <label className="block text-sm font-medium text-gray-700">
                      ÊúÄËøë„É°„ÉÉ„Çª„Éº„Ç∏‰øùÊåÅÊï∞
                    </label>
                    <p className="mt-1 text-sm text-gray-500">
                      ÂúßÁ∏ÆÊôÇ„Å´‰øùÊåÅ„Åô„ÇãÊúÄÊñ∞„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÊï∞ÔºàÂè§„ÅÑ„É°„ÉÉ„Çª„Éº„Ç∏„ÅØË¶ÅÁ¥Ñ„Åï„Çå„ÇãÔºâ
                    </p>
                  </div>
                  <div className="ml-4 flex-shrink-0">
                    <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
                      {settings.recentMessagesToKeep} ‰ª∂
                    </span>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Conversation Management Settings */}
            <Card>
              <CardHeader>
                <CardTitle>üí¨ ‰ºöË©±ÁÆ°ÁêÜË®≠ÂÆö</CardTitle>
                <p className="text-sm text-gray-600 mt-1">
                  ‰ºöË©±„Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆ„É©„Ç§„Éï„Çµ„Ç§„ÇØ„É´Ë®≠ÂÆö
                </p>
              </CardHeader>
              <CardContent>
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <label className="block text-sm font-medium text-gray-700">
                      ‰ºöË©±ÊúâÂäπÊúüÈôê (TTL)
                    </label>
                    <p className="mt-1 text-sm text-gray-500">
                      ‰ºöË©±„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåËá™ÂãïÂâäÈô§„Åï„Çå„Çã„Åæ„Åß„ÅÆÊôÇÈñì
                    </p>
                  </div>
                  <div className="ml-4 flex-shrink-0">
                    <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
                      {settings.conversationTtlHours} ÊôÇÈñì
                    </span>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Claude API Settings */}
            <Card>
              <CardHeader>
                <CardTitle>ü§ñ Claude APIË®≠ÂÆö</CardTitle>
                <p className="text-sm text-gray-600 mt-1">
                  Claude APIÂëº„Å≥Âá∫„Åó„ÅÆ„Éë„É©„É°„Éº„Çø
                </p>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <label className="block text-sm font-medium text-gray-700">
                      ‰ΩøÁî®„É¢„Éá„É´
                    </label>
                    <p className="mt-1 text-sm text-gray-500">
                      Claude APIÂëº„Å≥Âá∫„Åó„Åß‰ΩøÁî®„Åô„Çã„É¢„Éá„É´
                    </p>
                  </div>
                  <div className="ml-4 flex-shrink-0">
                    <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-indigo-100 text-indigo-800">
                      {settings.model}
                    </span>
                  </div>
                </div>

                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <label className="block text-sm font-medium text-gray-700">
                      ÊúÄÂ§ßÂá∫Âäõ„Éà„Éº„ÇØ„É≥Êï∞
                    </label>
                    <p className="mt-1 text-sm text-gray-500">
                      ClaudeÂøúÁ≠î„ÅÆÊúÄÂ§ß„Éà„Éº„ÇØ„É≥Êï∞
                    </p>
                  </div>
                  <div className="ml-4 flex-shrink-0">
                    <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-pink-100 text-pink-800">
                      {settings.maxTokens.toLocaleString()} „Éà„Éº„ÇØ„É≥
                    </span>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Implementation Details */}
            <Card className="bg-gray-50">
              <CardHeader>
                <CardTitle>üìö ÂÆüË£ÖË©≥Á¥∞</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4 text-sm text-gray-700">
                  <div>
                    <h3 className="font-medium text-gray-900 mb-2">
                      „Ç≥„É≥„ÉÜ„Ç≠„Çπ„ÉàÂúßÁ∏Æ„ÅÆ‰ªïÁµÑ„Åø
                    </h3>
                    <ul className="list-disc list-inside space-y-1 text-gray-600">
                      <li>
                        „Éà„Éº„ÇØ„É≥Êï∞„ÅåÈñæÂÄ§Ôºà80%Ôºâ„Å´ÈÅî„Åô„Çã„Å®Ëá™ÂãïÁöÑ„Å´ÂúßÁ∏Æ„ÇíÂÆüË°å
                      </li>
                      <li>Âè§„ÅÑ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíClaudeËá™Ë∫´„ÅåË¶ÅÁ¥Ñ</li>
                      <li>ÊúÄÊñ∞10‰ª∂„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÅØË¶ÅÁ¥Ñ„Åõ„Åö„Åù„ÅÆ„Åæ„Åæ‰øùÊåÅ</li>
                      <li>
                        Ë¶ÅÁ¥ÑÁµêÊûú„Çíconversation_summary„Çø„Ç∞„Åß„É©„ÉÉ„Éó„Åó„Å¶ÊåøÂÖ•
                      </li>
                    </ul>
                  </div>
                  <div>
                    <h3 className="font-medium text-gray-900 mb-2">
                      „Éà„Éº„ÇØ„É≥Êé®ÂÆöÊñπÊ≥ï
                    </h3>
                    <ul className="list-disc list-inside space-y-1 text-gray-600">
                      <li>Êó•Êú¨Ë™û: 1ÊñáÂ≠ó ‚âà 0.4„Éà„Éº„ÇØ„É≥</li>
                      <li>Ëã±Ë™û: 1ÊñáÂ≠ó ‚âà 0.25„Éà„Éº„ÇØ„É≥</li>
                      <li>Âπ≥Âùá: 1ÊñáÂ≠ó ‚âà 0.35„Éà„Éº„ÇØ„É≥ÔºàÊó•Ëã±Ê∑∑Âú®„ÇíËÄÉÊÖÆÔºâ</li>
                    </ul>
                  </div>
                  <div>
                    <h3 className="font-medium text-gray-900 mb-2">
                      ÂÆüË£Ö„Éï„Ç°„Ç§„É´
                    </h3>
                    <ul className="list-disc list-inside space-y-1 text-gray-600 font-mono text-xs">
                      <li>
                        projects/nakamura-misaki/src/infrastructure/context_manager.py
                      </li>
                      <li>
                        projects/nakamura-misaki/src/infrastructure/config.py
                      </li>
                      <li>
                        projects/nakamura-misaki/src/contexts/conversations/domain/services/claude_agent_service.py
                      </li>
                    </ul>
                  </div>
                  <div className="p-4 bg-blue-50 border border-blue-200 rounded">
                    <h3 className="font-medium text-blue-900 mb-2">
                      ‰ªäÂæå„ÅÆÊã°ÂºµÊ°à
                    </h3>
                    <ul className="list-disc list-inside space-y-1 text-blue-700 text-sm">
                      <li>Ë®≠ÂÆöÂ§âÊõ¥APIÂÆüË£ÖÔºàPOST /api/context/settingsÔºâ</li>
                      <li>„Éà„Éº„ÇØ„É≥‰ΩøÁî®Èáè„ÅÆÂèØË¶ñÂåñ„Ç∞„É©„Éï</li>
                      <li>ÂúßÁ∏ÆÂ±•Ê≠¥„ÅÆË°®Á§∫</li>
                      <li>Prompt CachingË®≠ÂÆöÔºà„Ç≥„Çπ„Éà90%ÂâäÊ∏õÔºâ</li>
                      <li>„É¢„Éá„É´ÈÅ∏ÊäûÔºàSonnet/HaikuÂàá„ÇäÊõø„ÅàÔºâ</li>
                    </ul>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  );
}
